{{- $baseName := printf "%s-%s-%s" .Release.Name (split "-" .Release.Namespace)._1 (split "-" .Release.Namespace)._2 }}
{{- $execSecretName := printf "%s-%s" $baseName "executor-env-secret" }}
{{- $driverSecretName := printf "%s-%s" $baseName "driver-env-secret" }}
{{- $sparkConfSecretName := printf "%s-%s" $baseName "spark-config-secret" }}
{{- $des := printf "%s-%s" $baseName "driver-external-secret" }}
{{- $ees := printf "%s-%s" $baseName "executor-external-secret" }}
{{- $ces := printf "%s-%s" $baseName "sparkconf-external-secret" }}
{{- $configMapName := printf "%s-%s" $baseName "spark-config-map" }}
{{- $base := . -}}

{{- if and (.Values.sparkDriverEnvSecrets) (.Values.keyVault.name) }}
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: {{ $des }}
  namespace: {{ .Release.Namespace }}
  annotations:
    rollme: {{ randAlphaNum 5 | quote }}
spec:
  refreshInterval: {{ .Values.keyVault.refreshInterval | quote }}
  secretStoreRef:
    kind: SecretStore
    name: {{ .Release.Name }}-secret-store
  target:
    name: {{ $driverSecretName }}
    creationPolicy: Owner
  data:
  {{- range $key,$val := .Values.sparkDriverEnvSecrets }}
  - secretKey: {{ $key }}
    remoteRef:
      key: {{ $val }}
  {{- end }}
{{- end }}


---


{{- if and (.Values.sparkExecutorEnvSecrets) (.Values.keyVault.name) }}
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: {{ $ees }}
  namespace: {{ .Release.Namespace }}
  annotations:
    rollme: {{ randAlphaNum 5 | quote }}
spec:
  refreshInterval: {{ .Values.keyVault.refreshInterval | quote }}
  secretStoreRef:
    kind: SecretStore
    name: {{ .Release.Name }}-secret-store
  target:
    name: {{ $execSecretName }}
    creationPolicy: Owner
  data:
  {{- range $key,$val := .Values.sparkExecutorEnvSecrets }}
  - secretKey: {{ $key }}
    remoteRef:
      key: {{ $val }}
  {{- end }}
{{- end }}


---


{{- if and (.Values.sparkConf) (.Values.keyVault.name) }}
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: {{ $ces }}
  namespace: {{ .Release.Namespace }}
  annotations:
    rollme: {{ randAlphaNum 5 | quote }}
spec:
  refreshInterval: {{ .Values.keyVault.refreshInterval | quote }}
  secretStoreRef:
    kind: SecretStore
    name: {{ .Release.Name }}-secret-store
  target:
    name: {{ $sparkConfSecretName }}
    creationPolicy: Owner
    template:
      engineVersion: v2
      templateFrom:
      - target: Data
        configMap:
          name: {{ $configMapName}}
          items:
          - key: template
            templateAs: KeysAndValues
  data:
    - secretKey: containerName
      remoteRef: 
        key: RESQUE_USERNAME
    - secretKey: storageAccountName
      remoteRef:
        key: RESQUE_USERNAME
    - secretKey: shufflePartition
      remoteRef:
        key: RESQUE_USERNAME
    - secretKey: clientSecret
      remoteRef:
        key: RESQUE_USER
{{- end }}


